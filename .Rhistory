if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rtracklayer")
library(rtracklayer)
library(readr)
library(ggplot2)
library(gplots)
?hclust
?as.dist
??readr
?as.dist
?hclust
install.packages("VennDiagram")
library(VennDiagram)
experiment1 <- c('peptide1', 'peptide2', 'peptide3')
experiment2 <- c('peptide2', 'peptide3', 'peptide4')
experiment3 <- c('peptide1', 'peptide4', 'peptide5')
# Create the Venn diagram
venn.plot <- venn.diagram(
x = list('Experiment 1' = experiment1, 'Experiment 2' = experiment2, 'Experiment 3' = experiment3),
category.names = c('Experiment 1', 'Experiment 2', 'Experiment 3'),
filename = NULL, # Set this to a file path to save the diagram, or NULL to plot directly
output = TRUE,
imagetype = "png", # Image type
height = 3000, # Image height
width = 3000, # Image width
resolution = 300, # Image resolution
compression = "lzw", # Image compression
col = "transparent",
fill = c("#999999", "#E69F00", "#56B4E9"),
alpha = 0.50,
label.col = c("black", "white", "white", "white", "white", "white", "white"),
cex = 2,
fontfamily = "serif",
fontface = "bold",
cat.default.pos = "text",
cat.col = c("#999999", "#E69F00", "#56B4E9"),
cat.cex = 2,
cat.fontfamily = "serif",
cat.dist = c(0.06, 0.06, 0.03),
cat.pos = 0
)
# Plot the diagram
grid.draw(venn.plot)
library(cleaver)
browseVignettes("cleaver")
library(edgeR)
library(ggplot2)
library(readr)
library(pheatmap)
library(DRIMSeq)
# Load required libraries
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("pheatmap", quietly = TRUE)) install.packages("pheatmap")
BiocManager::install(c("edgeR", "DRIMSeq", "pheatmap"))
library(edgeR)
library(ggplot2)
library(readr)
library(pheatmap)
library(DRIMSeq)
# Set working directory
setwd("/Volumes/sheynkman/projects/Mohi_MDS_LRP")
# Read in transcript-level count data
counts <- read.csv("01_isoseq/collapse/merged.collapsed.flnc_count.txt", header=TRUE, row.names=1)
# Define sample groups
group <- factor(c("Q157R", "Q157R", "Q157R", "WT", "WT", "WT"))
# Read in transcript-level count data
counts <- read.csv("01_isoseq/collapse/merged.collapsed.flnc_count.txt", header=TRUE, row.names=1)
# Define sample groups
group <- factor(c("Q157R", "Q157R", "Q157R", "WT", "WT", "WT"))
# Create DGEList object
dge <- DGEList(counts=counts, group=group)
# Filter transcripts with low expression
keep <- filterByExpr(dge)
dge <- dge[keep, , keep.lib.sizes=FALSE]
# Normalize data using TMM
dge <- calcNormFactors(dge, method = "TMM")
# Create design matrix
design <- model.matrix(~ group)
# Estimate dispersion and fit model
dge <- estimateDisp(dge, design)
fit <- glmQLFit(dge, design)
result <- glmQLFTest(fit, coef=2) # Compare Q157R to WT
# Extract results
deg_results <- topTags(result, n=Inf)$table
write.table(deg_results, file="20_visualization/transcript_DEG_results.txt", sep="\t", quote=FALSE, row.names=TRUE)
# Volcano Plot
deg_results$Gene <- rownames(deg_results)
# Compute CPM values
deg_results$CPM <- rowMeans(cpm(dge, log=TRUE))  # Log-transformed CPM
# Assign colors based on expression change criteria
deg_results$color <- factor(ifelse(deg_results$CPM > 2 & deg_results$logFC > 2, "Upregulated",
ifelse(deg_results$CPM > 2 & deg_results$logFC < -2, "Downregulated", "Not Significant")),
levels = c("Downregulated", "Not Significant", "Upregulated"))
# Create the volcano plot with CPM
ggplot(deg_results, aes(x=logFC, y=CPM, color=color)) +
geom_point(size=1) +
scale_color_manual(values=c("blue", "grey", "red"),
name="Differential Expression",
labels=c("Downregulated", "Not Significant", "Upregulated")) +
geom_hline(yintercept=log10(2), linetype="dashed") +
geom_vline(xintercept=c(-2, 2), linetype="dashed") +
geom_text(aes(label=ifelse(CPM > 3 & abs(logFC) > 2, Gene, "")),
hjust=1, vjust=1, size=3, check_overlap = TRUE) +
theme_minimal() +
labs(title="Volcano Plot - Transcripts (CPM)", x="Log2 Fold Change", y="Log10 CPM") +
theme(legend.title = element_text(size=10, face="bold"),
legend.text = element_text(size=9))
