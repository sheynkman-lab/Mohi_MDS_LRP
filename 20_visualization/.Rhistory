# === 0. Set working directory and output paths ===
setwd("/Volumes/sheynkman/projects/Mohi_MDS_LRP/20_visualization")
# Create output directory if it doesn't exist
outdir <- file.path(getwd(), "DTU")
if (!dir.exists(outdir)) {
dir.create(outdir)
}
# === 1. Load required libraries ===
library(edgeR)
library(dplyr)
library(ggplot2)
# === 2. Load transcript-level count data ===
counts <- read.csv("/Volumes/sheynkman/projects/Mohi_MDS_LRP/01_isoseq/collapse/merged.collapsed.flnc_count.txt", header=TRUE, row.names=1)
# === 3. Define sample groups ===
# Sample order: Q157R, Q157R, Q157R, WT, WT, WT
group <- factor(c("Q157R", "Q157R", "Q157R", "WT", "WT", "WT"))
# === 4. Create DGEList object ===
y <- DGEList(counts = counts, group = group)
# === 5. Filter out lowly expressed transcripts ===
keep <- filterByExpr(y, group = group)
y <- y[keep, , keep.lib.sizes = FALSE]
# === 6. Normalize ===
y <- calcNormFactors(y)
# === 7. Design matrix ===
design <- model.matrix(~ group)
# === 8. Estimate dispersion and fit model ===
y <- estimateDisp(y, design)
fit <- glmFit(y, design)
# === 9. Assign gene_id to each transcript ===
# Placeholder: assign transcript ID as gene_id (replace if you have a tx2gene map)
y$genes$gene_id <- rownames(y)
# === 10. DTU analysis ===
dtu <- diffSpliceDGE(fit, geneid = "gene_id", coef = 2)
# === 10. DTU analysis ===
dtu <- diffSpliceDGE(y, geneid = "gene_id", coef = 2)
str(y$genes)
head(y$genes)
# === 10. DTU analysis ===
y$genes <- data.frame(gene_id = y$genes$gene_id)
dtu <- diffSpliceDGE(y, geneid = "gene_id", coef = 2)
# === 2. Load transcript-level count data ===
counts <- read.csv("/Volumes/sheynkman/projects/Mohi_MDS_LRP/01_isoseq/collapse/merged.collapsed.flnc_count.txt", header=TRUE, row.names=1)
# === 3. Define sample groups ===
# Sample order: Q157R, Q157R, Q157R, WT, WT, WT
group <- factor(c("Q157R", "Q157R", "Q157R", "WT", "WT", "WT"))
# === 4. Create DGEList object ===
y <- DGEList(counts = counts, group = group)
# === 5. Filter out lowly expressed transcripts ===
keep <- filterByExpr(y, group = group)
y <- y[keep, , keep.lib.sizes = FALSE]
# === 6. Normalize ===
y <- calcNormFactors(y)
# === 7. Design matrix ===
design <- model.matrix(~ group)
# === 8. Estimate dispersion and fit model ===
y <- estimateDisp(y, design)
fit <- glmFit(y, design)
# === 9. Assign gene_id to each transcript ===
# Placeholder: assign transcript ID as gene_id (replace if you have a tx2gene map)
y$genes$gene_id <- rownames(y)
# === 10. DTU analysis ===
# Extract gene-like ID from transcript ID
pb_transcript_ids <- rownames(y)
pb_gene_ids <- sub("\\.\\d+$", "", pb_transcript_ids)  # Remove ".YY", keeping "PB.XX"
# Assign gene_id as grouping variable
y$genes <- data.frame(
tx_id = pb_transcript_ids,
gene_id = pb_gene_ids
)
dtu <- diffSpliceDGE(y, geneid = "gene_id", coef = 2)
# === 8. Estimate dispersion and fit model ===
y <- estimateDisp(y, design)
y <- glmFit(y, design)  # <--- overwrite y so it contains the fitted model
# === 9. Assign gene_id to each transcript ===
# Placeholder: assign transcript ID as gene_id (replace if you have a tx2gene map)
y$genes$gene_id <- rownames(y)
# === 10. DTU analysis ===
# Extract gene-like ID from transcript ID
pb_transcript_ids <- rownames(y)
pb_gene_ids <- sub("\\.\\d+$", "", pb_transcript_ids)  # Remove ".YY", keeping "PB.XX"
# Assign gene_id as grouping variable
y$genes <- data.frame(
tx_id = pb_transcript_ids,
gene_id = pb_gene_ids
)
dtu <- diffSpliceDGE(y, geneid = "gene_id", coef = 2)
# === 11. Extract top DTU results ===
top_dtu <- topSpliceDGE(dtu, test = "exon", number = Inf)
# === 12. Save results ===
outfile <- file.path(outdir, "top_dtu_transcripts_Q157R_vs_WT.tsv")
write.table(top_dtu, file = outfile, sep = "\t", quote = FALSE, row.names = FALSE)
message("DTU analysis complete. Results saved to: ", outfile)
