for (pkg in packages) {
if (!pkg %in% installed_packages) {
install.packages(pkg)
}
}
if (!"BiocManager" %in% installed_packages) install.packages("BiocManager")
if (!("edgeR" %in% installed_packages && "DRIMSeq" %in% installed_packages)) {
BiocManager::install(c("edgeR", "DRIMSeq"))
}
# Load libraries
lapply(packages, library, character.only = TRUE)
# Set working directory (consider using the 'here' package for portability)
setwd("/Volumes/sheynkman/projects/Mohi_MDS_LRP")
# Create output directory if it doesn't exist
output_dir <- "20_visualization"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Define sample groups
group <- factor(c("Q157R", "Q157R", "Q157R", "WT", "WT", "WT"))
# Function for Transcript Differential Expression (DTE)
run_transcript_DE <- function() {
# Read transcript counts
counts_transcript <- read.csv("01_isoseq/collapse/merged.collapsed.flnc_count.txt",
header = TRUE, row.names = 1)
# Create DGEList and filter lowly expressed transcripts
dge_transcript <- DGEList(counts = counts_transcript, group = group)
dge_transcript <- dge_transcript[filterByExpr(dge_transcript), , keep.lib.sizes = FALSE]
dge_transcript <- calcNormFactors(dge_transcript)
# Design matrix and dispersion estimation
design <- model.matrix(~ group)
dge_transcript <- estimateDisp(dge_transcript, design)
# Fit model and perform quasi-likelihood F-test
fit_transcript <- glmQLFit(dge_transcript, design)
result_transcript <- glmQLFTest(fit_transcript, coef = 2)
deg_transcripts <- topTags(result_transcript, n = Inf)$table
# Write DEG results to file
write.table(deg_transcripts, file = file.path(output_dir, "transcript_DEG_results.txt"),
sep = "\t", quote = FALSE)
# Barplot for top 10 differentially expressed transcripts
top_dte <- head(deg_transcripts, 10)
counts_tmm <- cpm(dge_transcript, log = FALSE)
top_counts <- counts_tmm[rownames(top_dte), ]
top_counts_long <- as.data.frame(t(top_counts))
top_counts_long$Sample <- rownames(top_counts_long)
top_counts_long <- tidyr::pivot_longer(top_counts_long, -Sample,
names_to = "Transcript",
values_to = "CPM")
p <- ggplot(top_counts_long, aes(x = Sample, y = CPM, fill = Transcript)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Top 10 Differentially Expressed Transcripts", y = "CPM") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(filename = file.path(output_dir, "top10_dte_barplot.png"),
plot = p, width = 8, height = 6, dpi = 300)
}
# Function for Gene Differential Expression (DGE)
run_gene_DE <- function() {
# Read gene counts
counts_gene <- read_delim("01_isoseq/gene_level_counts.txt", delim = "\t",
escape_double = FALSE, trim_ws = TRUE)
rownames(counts_gene) <- counts_gene[[1]]
counts_gene <- counts_gene[,-1]
# Create DGEList and filter lowly expressed genes
dge_gene <- DGEList(counts = counts_gene, group = group)
dge_gene <- dge_gene[filterByExpr(dge_gene), , keep.lib.sizes = FALSE]
dge_gene <- calcNormFactors(dge_gene)
# Design matrix and dispersion estimation
design_gene <- model.matrix(~ group)
dge_gene <- estimateDisp(dge_gene, design_gene)
# Fit model and perform quasi-likelihood F-test
fit_gene <- glmQLFit(dge_gene, design_gene)
result_gene <- glmQLFTest(fit_gene, coef = 2)
deg_genes <- topTags(result_gene, n = Inf)$table
# Write DEG results to file
write.table(deg_genes, file = file.path(output_dir, "gene_DEG_results.txt"),
sep = "\t", quote = FALSE)
# Barplot for top 10 differentially expressed genes
top_dge <- head(deg_genes, 10)
counts_gene_tmm <- cpm(dge_gene, log = FALSE)
top_gene_counts <- counts_gene_tmm[rownames(top_dge), ]
top_gene_counts_long <- as.data.frame(t(top_gene_counts))
top_gene_counts_long$Sample <- rownames(top_gene_counts_long)
top_gene_counts_long <- tidyr::pivot_longer(top_gene_counts_long, -Sample,
names_to = "Gene",
values_to = "CPM")
p <- ggplot(top_gene_counts_long, aes(x = Sample, y = CPM, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Top 10 Differentially Expressed Genes", y = "CPM") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave(filename = file.path(output_dir, "top10_dge_barplot.png"),
plot = p, width = 8, height = 6, dpi = 300)
}
# Function for Differential Transcript Usage (DTU) with DRIMSeq
run_DTU <- function() {
# Read counts for DRIMSeq using a comma delimiter and suppress column spec messages
counts <- vroom::vroom("01_isoseq/collapse/merged.collapsed.flnc_count.txt",
delim = ",", show_col_types = FALSE)
counts <- as.data.frame(counts)
# Verify expected column names: the file should have an "id" column followed by sample columns.
# If your file already contains proper column separation, you'll see columns like "id", "BioSample_1", etc.
if (!"id" %in% colnames(counts)) {
stop("The input file must contain an 'id' column.")
}
# Create feature and gene ID columns from the "id" column.
counts$feature_id <- counts$id
counts$gene_id <- counts$id  # Replace with real gene IDs if available.
# Define required columns for the analysis.
required_cols <- c("feature_id", "gene_id",
"BioSample_1", "BioSample_2", "BioSample_3",
"BioSample_4", "BioSample_5", "BioSample_6")
# Check if all required columns are present.
missing_cols <- setdiff(required_cols, colnames(counts))
if (length(missing_cols) > 0) {
stop("Missing columns in the input file: ", paste(missing_cols, collapse = ", "))
}
# Subset the counts data to include only the required columns.
counts <- counts[, required_cols]
# Define sample metadata. Adjust sample IDs and groups as needed.
md <- data.frame(
sample_id = colnames(counts)[3:8],
group = rep(c("Q157R", "WT"), each = 3)
)
# Prepare DRIMSeq data and apply filtering.
d <- DRIMSeq::dmDSdata(counts = counts, samples = md)
d <- DRIMSeq::dmFilter(d, min_samps_gene_expr = 3, min_samps_feature_expr = 3,
min_gene_expr = 10, min_feature_expr = 5)
# Create the design matrix for the analysis.
design_dtu <- model.matrix(~ group, data = DRIMSeq::samples(d))
d <- DRIMSeq::dmPrecision(d, design = design_dtu)
d <- DRIMSeq::dmFit(d, design = design_dtu)
d <- DRIMSeq::dmTest(d, coef = "groupWT")
# Define output directory (make sure it exists).
output_dir <- "20_visualization"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Save DTU results.
res_dtu_gene <- results(d, level = "gene")
res_dtu_feature <- results(d, level = "feature")
vroom::vroom_write(res_dtu_gene, file.path(output_dir, "dtu_gene_results.tsv"))
vroom::vroom_write(res_dtu_feature, file.path(output_dir, "dtu_transcript_results.tsv"))
# Generate barplots of the top 5 DTU genes based on transcript proportions.
top_dtu_gene <- head(res_dtu_gene[order(res_dtu_gene$pvalue), ], 5)$gene_id
for (g in top_dtu_gene) {
png_filename <- file.path(output_dir, paste0("dtu_", g, "_barplot.png"))
png(png_filename, width = 800, height = 600)
DRIMSeq::plotProportions(d, gene_id = g, group_variable = "group", plot_type = "barplot")
dev.off()
}
}
# Run Differential Transcript Usage analysis
run_DTU()
# Read counts for DRIMSeq using a comma delimiter and suppress column spec messages
counts <- vroom::vroom("01_isoseq/collapse/merged.collapsed.flnc_count.txt",
delim = ",", show_col_types = FALSE)
counts <- as.data.frame(counts)
# Verify expected column names: the file should have an "id" column followed by sample columns.
# If your file already contains proper column separation, you'll see columns like "id", "BioSample_1", etc.
if (!"id" %in% colnames(counts)) {
stop("The input file must contain an 'id' column.")
}
# Create feature and gene ID columns from the "id" column.
counts$feature_id <- counts$id
counts$gene_id <- counts$id  # Replace with real gene IDs if available.
# Define required columns for the analysis.
required_cols <- c("feature_id", "gene_id",
"BioSample_1", "BioSample_2", "BioSample_3",
"BioSample_4", "BioSample_5", "BioSample_6")
# Check if all required columns are present.
missing_cols <- setdiff(required_cols, colnames(counts))
if (length(missing_cols) > 0) {
stop("Missing columns in the input file: ", paste(missing_cols, collapse = ", "))
}
# Subset the counts data to include only the required columns.
counts <- counts[, required_cols]
# Define sample metadata. Adjust sample IDs and groups as needed.
md <- data.frame(
sample_id = colnames(counts)[3:8],
group = rep(c("Q157R", "WT"), each = 3)
)
# Prepare DRIMSeq data and apply filtering.
d <- DRIMSeq::dmDSdata(counts = counts, samples = md)
d <- DRIMSeq::dmFilter(d, min_samps_gene_expr = 3, min_samps_feature_expr = 3,
min_gene_expr = 10, min_feature_expr = 5)
# Prepare DRIMSeq data and apply filtering.
d <- DRIMSeq::dmDSdata(counts = counts, samples = md)
d <- DRIMSeq::dmFilter(d, min_samps_gene_expr = 2, min_samps_feature_expr = 2,
min_gene_expr = 5, min_feature_expr = 2)
d <- DRIMSeq::dmFilter(d, min_samps_gene_expr = 1, min_samps_feature_expr = 1,
min_gene_expr = 1, min_feature_expr = 1)
# Read counts for DRIMSeq using a comma delimiter and suppress column spec messages
counts <- vroom::vroom("01_isoseq/collapse/merged.collapsed.flnc_count.txt",
delim = ",", show_col_types = FALSE)
setwd("/Volumes/sheynkman/projects/Mohi_MDS_LRP/20_visualization")
# Load the needed packages
library(tidyr)
library(readr)
library(tibble)
library(edgeR)
library(pheatmap)
library(tximeta)
library(SingleCellExperiment)
install.packages("SingleCellExperiment")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
library(SingleCellExperiment)
# Load the needed packages
library(tidyr)
library(readr)
library(tibble)
library(edgeR)
library(pheatmap)
library(tximeta)
library(SingleCellExperiment)
library(ggplot2)
library(GGally)
library(here)
library(splines)
library(tidyverse)
library(dplyr)
library(rtracklayer)
# Define the project root as the current working directory
project_root <- here()
# Define the path for the results folder inside the project root (on the same level as the scripts folder)
results_folder <- file.path(project_root, "results")
# Create the results folder if it doesn't exist
if (!file.exists(results_folder)) {
dir.create(results_folder)
}
# Define the path for the experiment subfolder within results
experiment_subfolder <- file.path(results_folder, "15_bambu_isoform_frac_tables")
if (!file.exists(experiment_subfolder)) {
dir.create(experiment_subfolder)
}
# Define the path for the experiment subfolder within results
experiment_subfolder <- file.path(results_folder, "frac_tables")
if (!file.exists(experiment_subfolder)) {
dir.create(experiment_subfolder)
}
# Define the subdirectories for plots and output_table inside the experiment folder
plots_subfolder <- file.path(experiment_subfolder, "plots")
output_table_subfolder <- file.path(experiment_subfolder, "output_table")
if (!file.exists(plots_subfolder)) {
dir.create(plots_subfolder)
}
if (!file.exists(output_table_subfolder)) {
dir.create(output_table_subfolder)
}
# Print paths for debugging
cat("Results folder path:", results_folder, "\n")
cat("Experiment folder path:", experiment_subfolder, "\n")
cat("Plots subfolder path:", plots_subfolder, "\n")
cat("Output table subfolder path:", output_table_subfolder, "\n")
setwd("/Volumes/sheynkman/projects/Mohi_MDS_LRP/20_visualization/stackedbarplots")
# Set working directory to the visualization folder
setwd("/Volumes/sheynkman/projects/Mohi_MDS_LRP/20_visualization/stackedbarplots")
# Load the needed packages
library(tidyr)
library(readr)
library(tibble)
library(edgeR)
library(pheatmap)
library(tximeta)
library(SingleCellExperiment)
library(ggplot2)
library(GGally)
library(here)
library(splines)
library(tidyverse)
library(dplyr)
library(rtracklayer)
library(RColorBrewer)
# Define the input file path for the fractional abundance table
input_file <- "/Volumes/sheynkman/projects/Mohi_MDS_LRP/19_LRP_summary/isoform_fractions.tsv"
# Read in the fractional abundances
# This file should include at least the columns: gene_name, transcript_name, group, and avg_abundance (or fractional_abundance)
average_frac_abundance <- read.table(input_file, sep = "\t", header = TRUE)
# If you also have replicate-level data in your table (for example with a column "replicate"), you can also read that.
# For this example, we'll assume that if present, replicate-level data is in the same table.
by_rep <- average_frac_abundance  # change this if you have a separate file for replicate-level data
# For debugging: print a summary of the input data
cat("Input fractional abundance table loaded.\n")
print(head(average_frac_abundance))
# Validate fractional abundances for a gene of interest
# (example gene: VEGFA)
gene_of_interest <- "VEGFA"
gene_to_plot <- average_frac_abundance %>% filter(gene_name == gene_of_interest)
# Read in the fractional abundance table
# This table has columns: Isoform_index, Gene, Transcript, Transcript_name, and then sample columns like "X504_Q157R", etc.
frac_table <- read.table(input_file, sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# Preview the table structure
print(head(frac_table))
# Pivot the table from wide to long format for the sample columns.
# We assume that columns 1:4 are metadata and columns 5 onward are samples.
frac_long <- frac_table %>%
pivot_longer(cols = 5:ncol(frac_table),
names_to = "sample",
values_to = "fractional_abundance")
# Now, separate the 'sample' column into a sample identifier and a group.
# Assuming sample names are like "X504_Q157R" or "V335_WT": the group is after the underscore.
frac_long <- frac_long %>%
separate(sample, into = c("sample_id", "group"), sep = "_")
# If you want to compute the average fractional abundance per gene-isoform for each group,
# you can group by Gene, Transcript (or Transcript_name), and group.
average_frac_abundance <- frac_long %>%
group_by(Gene, Transcript, Transcript_name, group) %>%
summarize(avg_abundance = mean(fractional_abundance, na.rm = TRUE)) %>%
ungroup()
# For debugging, print the head of the averaged table:
print(head(average_frac_abundance))
### Validate fractional abundances for a gene of interest
# (example gene: VEGFA; adjust the gene name if VEGFA is not present in your table)
gene_of_interest <- "VEGFA"
gene_to_plot <- average_frac_abundance %>% filter(Gene == gene_of_interest)
if(nrow(gene_to_plot) == 0){
cat("Warning: gene", gene_of_interest, "not found in the table.\n")
} else {
# Check the total abundance for each group (should be ~1 if isoform fractions are normalized per gene)
abundance_by_group <- gene_to_plot %>%
group_by(group) %>%
summarise(total_abundance = sum(avg_abundance))
print(abundance_by_group)
}
### Validate fractional abundances for a gene of interest
# (example gene: Map3k7)
gene_of_interest <- "Map3k7"
gene_to_plot <- average_frac_abundance %>% filter(Gene == gene_of_interest)
if(nrow(gene_to_plot) == 0){
cat("Warning: gene", gene_of_interest, "not found in the table.\n")
} else {
# Check the total abundance for each group (should be ~1 if isoform fractions are normalized per gene)
abundance_by_group <- gene_to_plot %>%
group_by(group) %>%
summarise(total_abundance = sum(avg_abundance))
print(abundance_by_group)
}
### Plotting Stacked Bar Plots for a Selected Gene
# If gene_of_interest was not found, you might try another gene.
# For demonstration, we proceed if there is data.
if(nrow(gene_to_plot) > 0){
# Remove rows with 0 abundance to avoid clutter in the plots
plotting <- gene_to_plot %>% filter(avg_abundance > 0) %>% arrange(desc(avg_abundance))
# Create a color palette based on the number of unique transcripts
unique_transcripts <- unique(plotting$Transcript_name)
mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(length(unique_transcripts))
p1 <- ggplot(plotting, aes(x = group, y = avg_abundance, fill = Transcript_name)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = paste("Stacked Barplot for", gene_of_interest, "\n(WT vs Mutant)"),
x = "Sample Group", y = "Fractional Abundance") +
theme_minimal() +
scale_fill_manual(values = mycolors) +
guides(fill = guide_legend(reverse = TRUE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(expand = c(0, 0))
print(p1)
ggsave(file.path(getwd(), paste0(gene_of_interest, "_WT_vs_Mutant_plot.png")), p1, width = 6, height = 4)
}
### Loop Through Multiple Genes to Generate Plots
# Use the averaged table to loop over genes
genes_of_interest <- unique(average_frac_abundance$Gene)
for (gene in genes_of_interest) {
genes_to_plot <- average_frac_abundance %>% filter(Gene == gene)
if(nrow(genes_to_plot) == 0) next
p <- ggplot(genes_to_plot, aes(x = group, y = avg_abundance, fill = Transcript_name)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = paste("Stacked Barplot for", gene, "\n(WT vs Mutant)"),
x = "Sample Group", y = "Average Fractional Abundance") +
theme_minimal() +
scale_fill_manual(values = mycolors) +
guides(fill = guide_legend(reverse = TRUE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(expand = c(0, 0))
plot_filename <- file.path(getwd(), paste0(gene, "_WT_vs_Mutant_plot.png"))
ggsave(plot_filename, p, width = 6, height = 4)
}
gene_of_interest <- "Mrpl15"  # adjust gene as needed
gene_test <- frac_long %>% filter(Gene == gene_of_interest)
# Check total fractional abundance per group-sample (should be ~1)
abundance_by_rep <- gene_test %>%
group_by(group, sample_id) %>%
summarise(total_fractional_abundance = sum(fractional_abundance))
print(abundance_by_rep)
# Create a replicate-level plot
nb.cols <- max(18, length(unique(gene_test$Transcript_name)))
mycolors_rep <- colorRampPalette(brewer.pal(8, "Set2"))(nb.cols)
p_rep <- ggplot(gene_test, aes(x = paste(group, sample_id, sep = "."), y = fractional_abundance, fill = Transcript_name)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = paste("Replicate-level Stacked Barplot for", gene_of_interest, "\n(WT vs Mutant)"),
x = "Group.Sample", y = "Fractional Abundance") +
theme_minimal() +
scale_fill_manual(values = mycolors_rep) +
guides(fill = guide_legend(reverse = TRUE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(expand = c(0, 0))
print(p_rep)
ggsave(file.path(getwd(), paste0(gene_of_interest, "_replicates_WT_vs_Mutant_plot.png")), p_rep, width = 8, height = 4)
### (Optional) Replicate-Level Plotting
# If your original table contained replicate-level data and you need to use that (here using frac_long)
if("sample_id" %in% colnames(frac_long)){
gene_of_interest <- "Mrpl15"  # adjust gene as needed
gene_test <- frac_long %>% filter(Gene == gene_of_interest)
# Check total fractional abundance per group-sample (should be ~1)
abundance_by_rep <- gene_test %>%
group_by(group, sample_id) %>%
summarise(total_fractional_abundance = sum(fractional_abundance))
print(abundance_by_rep)
# Create a replicate-level plot
nb.cols <- max(18, length(unique(gene_test$Transcript_name)))
mycolors_rep <- colorRampPalette(brewer.pal(8, "Set2"))(nb.cols)
p_rep <- ggplot(gene_test, aes(x = paste(group, sample_id, sep = "."), y = fractional_abundance, fill = Transcript_name)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = paste("Replicate-level Stacked Barplot for", gene_of_interest, "\n(WT vs Mutant)"),
x = "Group.Sample", y = "Fractional Abundance") +
theme_minimal() +
scale_fill_manual(values = mycolors_rep) +
guides(fill = guide_legend(reverse = TRUE)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(expand = c(0, 0))
print(p_rep)
ggsave(file.path(getwd(), paste0(gene_of_interest, "_replicates_WT_vs_Mutant_plot.png")), p_rep, width = 8, height = 4)
}
### Additional: Top 50 Most Differentially Expressed Isoforms (WT vs Q157R)
# First, pivot the averaged table to wide format (one row per isoform) with columns for each group.
# We assume here that the groups are named exactly "WT" and "Q157R".
diff_table <- average_frac_abundance %>%
pivot_wider(names_from = group, values_from = avg_abundance)
# Compute the absolute difference in fractional abundance between Q157R and WT.
# (Adjust the column names if your groups are named differently.)
diff_table <- diff_table %>%
mutate(diff = abs(`Q157R` - WT))
# Select the top 50 isoforms based on the differential value.
top50 <- diff_table %>% arrange(desc(diff)) %>% slice(1:50)
# Pivot back to long format for plotting.
top50_long <- top50 %>%
pivot_longer(cols = c("WT", "Q157R"), names_to = "group", values_to = "avg_abundance")
# Create a unique label for each isoform (combining Gene and Transcript_name)
top50_long <- top50_long %>%
mutate(isoform_label = paste(Gene, Transcript_name, sep = ": "))
# Plot the top 50 differential isoforms as grouped (side-by-side) bar plots.
p_top50 <- ggplot(top50_long, aes(x = reorder(isoform_label, -avg_abundance), y = avg_abundance, fill = group)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Top 50 Most Differentially Expressed Isoforms (WT vs Q157R)",
x = "Isoform (Gene: Transcript)", y = "Average Fractional Abundance") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
scale_y_continuous(expand = c(0, 0))
print(p_top50)
ggsave(file.path(getwd(), "Top50_Differential_Isoforms_WT_vs_Q157R.png"), p_top50, width = 12, height = 8)
# Define the path to your gene expression file
gene_expr_file <- "/Volumes/sheynkman/projects/Mohi_MDS_LRP/19_LRP_summary/diff_gene_expression.tsv"
# Read in the gene expression table.
# This file should include columns: Gene, WT_expression, Q157R_expression
gene_expr <- read.table(gene_expr_file, sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# Extract the unique genes associated with the top 50 isoforms.
top50_genes <- unique(top50$Gene)
# Filter the gene expression table for these genes.
gene_expr_top50 <- gene_expr %>% filter(Gene %in% top50_genes)
# Define the path to your gene expression file
gene_expr_file <- "/Volumes/sheynkman/projects/Mohi_MDS_LRP/19_LRP_summary/diff_gene_expression.tsv"
# Read in the gene expression table.
# This file should include columns: gene_id, WT_expression, Q157R_expression.
gene_expr <- read.table(gene_expr_file, sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# From your isoform analysis, assume 'top50' was computed as the top 50 most differential isoforms.
# Extract the unique gene identifiers associated with these isoforms.
top50_genes <- unique(top50$Gene)
# Filter the gene expression table for these genes.
# If your gene expression file uses "gene_id" as the identifier, use that:
gene_expr_top50 <- gene_expr %>% filter(gene_id %in% top50_genes)
head(top50_genes)
colnames(gene_expr)
# Define the path to your gene expression file
gene_expr_file <- "/Volumes/sheynkman/projects/Mohi_MDS_LRP/19_LRP_summary/diff_gene_expression.tsv"
# Read in the gene expression table.
# The file contains columns: gene_index, gene, avg_expr, delta, p.value.
gene_expr <- read.table(gene_expr_file, sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# From your isoform analysis, assume 'top50' was computed as the top 50 most differential isoforms.
# Extract the unique gene names associated with these isoforms.
top50_genes <- unique(top50$Gene)
# Filter the gene expression table for these genes using the "gene" column.
gene_expr_top50 <- gene_expr %>% filter(gene %in% top50_genes)
# Compute approximate group-level expression values assuming:
#   avg_expr = (WT_expression + Q157R_expression) / 2
#   delta = Q157R_expression - WT_expression
# Hence:
#   WT_expression = avg_expr - delta/2
#   Q157R_expression = avg_expr + delta/2
gene_expr_top50 <- gene_expr_top50 %>%
mutate(WT_expression = avg_expr - delta/2,
Q157R_expression = avg_expr + delta/2)
# Pivot the gene expression data into long format so that each gene has a row per group.
gene_expr_long <- gene_expr_top50 %>%
pivot_longer(cols = c(WT_expression, Q157R_expression),
names_to = "group",
values_to = "expression")
# Create a grouped bar plot for gene-level expression.
p_gene <- ggplot(gene_expr_long, aes(x = reorder(gene, expression), y = expression, fill = group)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Differential Gene Expression for Top 50 Isoform Genes (WT vs Q157R)",
x = "Gene", y = "Log Average Expression") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(expand = c(0, 0))
print(p_gene)
ggsave(file.path(getwd(), "Top50_Genes_Differential_Expression.png"), p_gene, width = 10, height = 6)
